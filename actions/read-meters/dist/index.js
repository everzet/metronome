module.exports =
/******/ (function(modules, runtime) { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete installedModules[moduleId];
/******/ 		}
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	__webpack_require__.ab = __dirname + "/";
/******/
/******/ 	// the startup function
/******/ 	function startup() {
/******/ 		// Load entry module and return exports
/******/ 		return __webpack_require__(104);
/******/ 	};
/******/
/******/ 	// run startup
/******/ 	return startup();
/******/ })
/************************************************************************/
/******/ ({

/***/ 104:
/***/ (function(__unusedmodule, __unusedexports, __webpack_require__) {

const core = __webpack_require__(990);
const github = __webpack_require__(690);
const toml = __webpack_require__(156);

const readMeters = __webpack_require__(594);
const commitFile = __webpack_require__(426);
const isFileContent = __webpack_require__(184);

async function main() {
  try {
    // Repository
    const repo = github.context.repo;
    const repoBranch = core.getInput("repo-branch");
    const repoToken = core.getInput("repo-token");

    // Meters & Readings file
    const metersScript = core.getInput("meters-script");
    const readingsPath = core
      .getInput("readings-path")
      .replace("${repo-branch}", repoBranch);

    // Produce readings
    const octokit = github.getOctokit(repoToken);
    const readings = await readMeters(metersScript);
    const readingsToml = `# AUTOGENERATED FILE\n\n${toml.stringify(readings)}`;

    // Commit readings into repo, if changed
    if (isFileContent(readingsPath, readingsToml)) {
      core.info("No change in readings, skipping commit");
    } else {
      const ref = await commitFile(
        octokit.git,
        repo,
        `heads/${repoBranch}`,
        readingsPath,
        readingsToml,
        "Update meter readings"
      );
      core.info(`Committed reading changes to ${readingsPath} via ${ref.sha}`);
    }

    core.setOutput("readings", readings);
  } catch (error) {
    core.setFailed(error);
  }
}

main();


/***/ }),

/***/ 156:
/***/ (function(module) {

module.exports = eval("require")("@iarna/toml");


/***/ }),

/***/ 184:
/***/ (function(module, __unusedexports, __webpack_require__) {

const path = __webpack_require__(622);
const fs = __webpack_require__(747);

module.exports = (filePath, content) => {
  try {
    fileContent = fs
      .readFileSync(path.join(process.cwd(), filePath))
      .toString();

    return fileContent.trim() === content.trim();
  } catch (error) {
    return false;
  }
};


/***/ }),

/***/ 426:
/***/ (function(module) {

module.exports = async (git, repo, ref, path, content, message) => {
  const lastCommit = await getLastCommitInRef(git, repo, ref);
  const baseTree = await getBaseTree(git, repo, lastCommit);

  const contentBlob = await createContentBlob(git, repo, content);
  const newTree = await createSubTree(git, repo, baseTree, path, contentBlob);
  const newCommit = await createCommit(git, repo, lastCommit, newTree, message);

  const updatedRef = await pointRefToCommit(git, repo, ref, newCommit);

  return updatedRef;
};

async function getLastCommitInRef(git, repo, ref) {
  const {
    data: { object },
  } = await git.getRef({ ...repo, ref });

  return object;
}

async function getBaseTree(git, repo, lastCommit) {
  const {
    data: { tree },
  } = await git.getCommit({ ...repo, commit_sha: lastCommit.sha });

  return tree;
}

async function createContentBlob(git, repo, content) {
  const { data: blob } = await git.createBlob({
    ...repo,
    content,
    encoding: "utf-8",
  });

  return blob;
}

async function createSubTree(git, repo, baseTree, path, contentBlob) {
  const { data: subTree } = await git.createTree({
    ...repo,
    base_tree: baseTree.sha,
    tree: [
      {
        path,
        mode: "100644",
        type: "blob",
        sha: contentBlob.sha,
      },
    ],
  });

  return subTree;
}

async function createCommit(git, repo, parent, tree, message) {
  const { data: commit } = await git.createCommit({
    ...repo,
    message,
    tree: tree.sha,
    parents: [parent.sha],
  });

  return commit;
}

async function pointRefToCommit(git, repo, ref, commit) {
  const {
    data: { object: updatedRef },
  } = await git.updateRef({ ...repo, ref, sha: commit.sha });

  return updatedRef;
}


/***/ }),

/***/ 594:
/***/ (function(module, __unusedexports, __webpack_require__) {

const path = __webpack_require__(622);

module.exports = async (metersScript) => {
  const meters = require(path.join(process.cwd(), metersScript));
  const promises = [];
  const readings = {};

  for (const name of Object.keys(meters)) {
    promises.push(meters[name]().then((result) => (readings[name] = result)));
  }

  await Promise.all(promises);

  return readings;
};


/***/ }),

/***/ 622:
/***/ (function(module) {

module.exports = require("path");

/***/ }),

/***/ 690:
/***/ (function(module) {

module.exports = eval("require")("@actions/github");


/***/ }),

/***/ 747:
/***/ (function(module) {

module.exports = require("fs");

/***/ }),

/***/ 990:
/***/ (function(module) {

module.exports = eval("require")("@actions/core");


/***/ })

/******/ });